# Generated by Django 5.2.4 on 2025-07-31 07:49

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('item_type', models.CharField(choices=[('pokeball', 'Pokeball'), ('potion', 'Potion'), ('berry', 'Berry'), ('stone', 'Evolution Stone'), ('misc', 'Miscellaneous')], max_length=20)),
                ('description', models.TextField()),
                ('price', models.IntegerField(default=0)),
                ('sprite_url', models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PokemonSpecies',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pokedex_id', models.IntegerField(unique=True)),
                ('name', models.CharField(max_length=100)),
                ('type1', models.CharField(max_length=20)),
                ('type2', models.CharField(blank=True, max_length=20, null=True)),
                ('base_hp', models.IntegerField()),
                ('base_attack', models.IntegerField()),
                ('base_defense', models.IntegerField()),
                ('base_sp_attack', models.IntegerField()),
                ('base_sp_defense', models.IntegerField()),
                ('base_speed', models.IntegerField()),
                ('sprite_url', models.URLField(blank=True, null=True)),
                ('rarity', models.CharField(choices=[('common', 'Common'), ('uncommon', 'Uncommon'), ('rare', 'Rare'), ('epic', 'Epic'), ('legendary', 'Legendary'), ('mythical', 'Mythical')], default='common', max_length=20)),
                ('catch_rate', models.IntegerField(default=45, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(255)])),
                ('evolution_level', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('evolves_from', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='evolutions', to='game.pokemonspecies')),
            ],
            options={
                'verbose_name_plural': 'Pokemon Species',
                'ordering': ['pokedex_id'],
            },
        ),
        migrations.CreateModel(
            name='UserPokemon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nickname', models.CharField(blank=True, max_length=50)),
                ('level', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('experience', models.IntegerField(default=0)),
                ('iv_hp', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(31)])),
                ('iv_attack', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(31)])),
                ('iv_defense', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(31)])),
                ('iv_sp_attack', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(31)])),
                ('iv_sp_defense', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(31)])),
                ('iv_speed', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(31)])),
                ('current_hp', models.IntegerField()),
                ('is_shiny', models.BooleanField(default=False)),
                ('is_favorite', models.BooleanField(default=False)),
                ('battles_won', models.IntegerField(default=0)),
                ('battles_lost', models.IntegerField(default=0)),
                ('caught_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pokemon', to=settings.AUTH_USER_MODEL)),
                ('species', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='game.pokemonspecies')),
            ],
            options={
                'ordering': ['-caught_at'],
            },
        ),
        migrations.CreateModel(
            name='Battle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('battle_type', models.CharField(choices=[('wild', 'Wild Pokemon'), ('trainer', 'Trainer Battle'), ('gym', 'Gym Battle')], max_length=20)),
                ('status', models.CharField(choices=[('ongoing', 'Ongoing'), ('won', 'Won'), ('lost', 'Lost'), ('fled', 'Fled')], default='ongoing', max_length=20)),
                ('opponent_level', models.IntegerField(default=5)),
                ('turns', models.IntegerField(default=0)),
                ('battle_log', models.TextField(default='[]')),
                ('experience_gained', models.IntegerField(default=0)),
                ('coins_gained', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('trainer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='battles', to=settings.AUTH_USER_MODEL)),
                ('opponent_pokemon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='game.pokemonspecies')),
                ('player_pokemon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='battles_as_player', to='game.userpokemon')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trainer_name', models.CharField(max_length=50, unique=True)),
                ('level', models.IntegerField(default=1)),
                ('experience', models.IntegerField(default=0)),
                ('coins', models.IntegerField(default=1000)),
                ('pokeballs', models.IntegerField(default=10)),
                ('great_balls', models.IntegerField(default=5)),
                ('ultra_balls', models.IntegerField(default=2)),
                ('master_balls', models.IntegerField(default=0)),
                ('daily_catches', models.IntegerField(default=0)),
                ('last_catch_reset', models.DateField(auto_now_add=True)),
                ('total_pokemon_caught', models.IntegerField(default=0)),
                ('battles_won', models.IntegerField(default=0)),
                ('battles_lost', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='game.item')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'item')},
            },
        ),
    ]
